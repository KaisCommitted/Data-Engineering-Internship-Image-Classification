# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d5mwDwhJZMSNbJgzSuWetWJWQRfnFQP6
"""

import os
import numpy as np
import pandas as pd
from PIL import Image
import tensorflow
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from flask import Flask, render_template, request
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array

app = Flask(__name__)

app.secret_key = "secret key"


#loading models
#couleur
json_file = open("couleur/finalized_model.json", 'r')
model_json_a = json_file.read()
json_file.close()
model_couleur = tensorflow.keras.models.model_from_json(model_json_a)
model_couleur.load_weights("couleur/finalized_model.h5")
#Forme
json_file = open("Forme/bestmodel.json", 'r')
model_json_b = json_file.read()
json_file.close()
model_Forme = tensorflow.keras.models.model_from_json(model_json_b)
model_Forme.load_weights("Forme/finalized_model.h5")
#materiau
json_file = open("materiau/bestmodel.json", 'r')
model_json_c = json_file.read()
json_file.close()
model_materiau = tensorflow.keras.models.model_from_json(model_json_c)
model_materiau.load_weights("materiau/finalized_model.h5")
#monture
json_file = open("monture/bestmodel.json", 'r')
model_json_d = json_file.read()
json_file.close()
model_monture = tensorflow.keras.models.model_from_json(model_json_d)
model_monture.load_weights("monture/finalized_model.h5")
#sexe
json_file = open("sexe/bestmodel.json", 'r')
model_json_e = json_file.read()
json_file.close()
model_sexe = tensorflow.keras.models.model_from_json(model_json_e)
model_sexe.load_weights("sexe/finalized_model.h5")
#type
json_file = open("type/bestmodel.json", 'r')
model_json_f = json_file.read()
json_file.close()
model_type = tensorflow.keras.models.model_from_json(model_json_f)
model_type.load_weights("type/finalized_model.h5")

sexe=['Femme', 'Homme']
couleur=['Blanc', 'Bleu', 'Gris', 'Jaune', 'Marron', 'Multicouleurs', 'Noir', 'Rouge', 'Transparent']
forme=['Aviateur', 'Browline', 'CatEye', 'Cœur', 'Geometric', 'Ovale', 'Rectangulaire', 'Visage carré', 'Visage rond']
materiau=['acetate', 'acetate,metal', 'acetate,mixedwood', 'acetate-metal', 'metal', 'plastic', 'plastic-metal']
monture=['Lunettede soleil cerclées', 'Lunettes devue cerclées', 'Lunettes de vue demi-cerclées', 'Lunettes de vue percées']
type=['Optique', 'Soleil'] 

def load_image(img_path):

    img = image.load_img(img_path, target_size=(224, 224))
    img_tensor = image.img_to_array(img)                    # (height, width, channels)
    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)
    #img_tensor /= 255.                                      # imshow expects values in the range [0, 1]

    return img_tensor
def prediction(img_path):
    new_image = load_image(img_path)
    pred_couleur = model_couleur.predict(new_image)
    pred_forme = model_Forme.predict(new_image)
    pred_materiau = model_materiau.predict(new_image)
    pred_monture = model_monture.predict(new_image)
    pred_sexe = model_sexe.predict(new_image)
    pred_type = model_type.predict(new_image)

    labels_couleur=np.array(pred_couleur)
    print(labels_couleur)
    labels_couleur[labels_couleur>=0.6]=1
    labels_couleur[labels_couleur<0.6]=0
    index_couleur = np.argmax(labels_couleur)
 
    labels_forme=np.array(pred_forme)
    labels_forme[labels_forme>=0.6]=1
    labels_forme[labels_forme<0.6]=0
    index_forme = np.argmax(labels_forme)
 
    labels_materiau=np.array(pred_materiau)
    labels_materiau[labels_materiau>=0.6]=1
    labels_materiau[labels_materiau<0.6]=0
    index_materiau = np.argmax(labels_materiau)
 
    labels_monture=np.array(pred_monture)
    labels_monture[labels_monture>=0.6]=1
    labels_monture[labels_monture<0.6]=0
    index_monture = np.argmax(labels_monture)
 
    labels_sexe=np.array(pred_sexe)
    labels_sexe[labels_sexe>=0.6]=1
    labels_sexe[labels_sexe<0.6]=0
    index_sexe = np.argmax(labels_sexe)
 
    labels_type=np.array(pred_type)
    labels_type[labels_type>=0.6]=1
    labels_type[labels_type<0.6]=0
    index_type = np.argmax(labels_type)
 
    return index_couleur ,index_forme,index_materiau,index_monture,index_sexe,index_type
 

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict',methods=['POST'])
def predict():
      
    file = request.files['file']
    filename = file.filename
    file_path = os.path.join('static/', filename)                       #slashes should be handeled properly
    file.save(file_path)
    predict_c ,predict_f,predict_m,predict_mo,predict_s,predict_t = prediction(file_path)
    prediction_str="\rCouleur : "+couleur[predict_c]+"\rForme :"+forme[predict_f]+"\rMateriel :"+materiau[predict_m]+"\rMonture :"+monture[predict_mo]+"\rSexe :"+sexe[predict_s]  +"\nle type est: "+type[predict_t]
    return render_template('index.html', prediction_text='{}'.format(prediction_str))


if __name__ == "__main__":
    app.run(debug=True)